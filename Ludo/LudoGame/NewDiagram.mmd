classDiagram

    %% === GameController ===
    class GameController {
        -Dictionary<.IPlayer, List<.IPiece>> _playerPieces
        -Dictionary<.Color, List <.Position>> _playerPaths
        -Dictionary<Position, ZoneType> _zoneMap;
        -IDice _dice
        -List~IPlayer~ _players
        -IBoard _board
        -int _currentTurnIndex
        +event Action OnGameStart

        +GameController(IPlayer, IPlayer, IPlayer, IPlayer, IDice, IBoard)
        +StartGame()
        +RollDice() int
        +GetCurrentPlayer() Player
        +NextTurn()
        +ZoneType GetZoneTypeForPiece(Piece)
        +CanMove(Piece, int)
        +MovePiece(Piece, int, int) bool
        +CheckWin(Player)
        +CaptureIfExists()
        +CanEnterFromBase(Piece, int) bool
        +GetPathForPlayer(Color) List~Position~
        +GetPiecePathIndex(Piece) int
    }

    %% === IPlayer & Player ===
    class IPlayer {
        <<Interface>>
        +string Name
        +Color Color
    }

    class Player {
        +string Name
        +Color Color
        +Player(string, Color)
    }

    %% === Piece ===
    class IPiece {
        <<Interface>>
        +Color PieceColor 
        +IPlayer PlayerOwner 
        +PieceState State
        +int StepIndex
    }

    class Piece {
        +Color PieceColor 
        +IPlayer PlayerOwner 
        +PieceState State
        +int StepIndex
        +Piece(int, Color, Player)
    }

    %% === IDice & Dice ===
    class IDice {
        <<Interface>>
        +int Roll()
    }

    class Dice {
        -Random _random
        +Dice()
        +int Roll()
    }

    %% === IBoard & Board ===
    class IBoard {
        <<Interface>>
        +Piece?[,] Grid
    }

    class Board {
        +Piece?[,] Grid 
        +Board()
    }

    %% === Supporting Types ===
    class Position {
        <<record struct>>
        +int X
        +int Y
        +Position(int, int)
    }

    class PieceState {
        <<enumeration>>
        AtBase
        Active
        Home
    }

    class ZoneType {
        <<enumeration>>
        Base
        StartPoint
        CommonPath
        HomePath
        HomePoint
        SafeZone
        BlockedPath
        Empty
    }

    class Color {
        <<enumeration>>
        BLUE
        RED
        GREEN
        YELLOW
    }


    %% GameController o-- Color
    %% GameController o-- Position
    %% GameController o-- ZoneType

    %% IPlayer <|.. Player
    %% IBoard  <|.. Board
    %% IPiece  <|.. Piece
    %% IDice   <|.. Dice

    %% GameController *.. IPlayer
    %% GameController *.. IBoard
    %% GameController *.. IDice
    %% GameController *.. IPiece

    %% IPiece --> PieceState

    %% Color <-- IPiece

    GameController  *--  IDice : uses
    GameController  *--  IBoard : uses
    GameController  *--  IPlayer : aggregates
    GameController  *--  IPiece : manages
    GameController -- Position : uses
    GameController -- ZoneType : uses
    GameController -- Color : uses
    GameController -- PieceState : uses

    IPlayer <|-- Player : implements
    Player -- Color : uses

    IPiece <|-- Piece : implements
    IPiece -- IPlayer : associates with
    IPiece -- Color : uses
    IPiece -- PieceState : uses

    IDice <|-- Dice : implements

    IBoard <|-- Board : implements
    IBoard *-- Piece : aggregates