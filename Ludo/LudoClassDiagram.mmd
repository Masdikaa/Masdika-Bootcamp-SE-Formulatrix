classDiagram
    class GameController {
        -List<Player> players
        -Board board
        -Dice dice
        -GameStateManager stateManager
        +StartGame()
        +NextTurn()
        +MovePiece(Player, Piece, int)
        -CanExitBase(Player, Piece) bool
        -CanCapture(Piece, Tile) bool
        -IsSafeZone(Tile) bool
        -CheckWin(Player) bool
        %% Event Diganti 
        %% Example OnGameStart -> Game dimulai, apa saja yang dijalankan 
        +event Action<Piece, Tile> OnPieceMoved
        +event Action<Player> OnPlayerWin
    }

    class Player {
        -string Name
        -Color Color
        -List<Piece> Pieces
    }

    class Piece {
        -Player Owner
        -Tile CurrentTile
        -bool IsAtBase
        -bool IsInHome
        +MoveTo(Tile)
        +ResetToBase()
    }

    %% Interfacing Board
    class Board { 
        -List<Tile> Tiles
        +GetStartTile(Player) Player
        +GetNextTile(Piece, int) Tile
        +GetHomePath(Player) List<Tile>
    }

    %% Struct Position
    class Tile {
        -int Position
        -bool IsSafeZone
        -Color? TileColor
        -List<Piece> PiecesOnTile
    }

    class Dice {
        <<interface>>
        +Roll() int
        %% +event Action<int> OnDiceRolled
    }

    class GameStateManager {
        -IGameState CurrentState
        +ChangeState(IGameState newState)
    }

    class IGameState {
        <<interface>>
        +Enter()
        +Execute()
        +Exit()
    }

    GameController "1" o-- "2..4" Player : manages
    GameController "1" *-- "1" Board : has
    GameController "1" *-- "1" Dice : uses
    GameController "1" *-- "1" GameStateManager : controls
    
    Player "1" *-- "4" Piece : owns
    Board "1" *-- "*" Tile : contains
    Piece "*" -- "0..1" Tile : located_on
    GameStateManager "1" --> "1" IGameState : currentState